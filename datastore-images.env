source ./install.env

# caller is expected to import instana.env with the instana version

function undefined_datastore_key() {
   local datastore=$1
   local instana_version=$2
   local key=$3

   local file="$INSTANA_RELEASE_FILENAME"

   echo undefined datastore key: $key, datastore $datastore, instana version $instana_version, file $file
   exit 1
}

function select_datastore() {
  local datastore=$1
  local instana_version=$2
  local key=$3

  val=`./gen/bin/yq ".datastores.${datastore}.versions.[]|select(.instana==\"${instana_version}\")|.$key" ./${INSTANA_RELEASE_FILENAME}`

  if test -z "$val"; then
    echo ""

  else
    echo $val
  fi
}

#
# cassandra
#
CASSANDRA_OPERATOR_CHART_VERSION=$(select_datastore "cassandra" "$INSTANA_VERSION" "CASSANDRA_OPERATOR_CHART_VERSION")
if test -z "$CASSANDRA_OPERATOR_CHART_VERSION"; then undefined_datastore_key "cassandra" "$INSTANA_VERSION" "CASSANDRA_OPERATOR_CHART_VERSION"; fi

CASSANDRA_OPERATOR_CHART_APP_VERSION=$(select_datastore "cassandra" "$INSTANA_VERSION" "CASSANDRA_OPERATOR_CHART_APP_VERSION")
if test -z "$CASSANDRA_OPERATOR_CHART_APP_VERSION"; then undefined_datastore_key "cassandra" "$INSTANA_VERSION" "CASSANDRA_OPERATOR_CHART_APP_VERSION"; fi

CASSANDRA_IMG=$(select_datastore "cassandra" "$INSTANA_VERSION" "CASSANDRA_IMG")
if test -z "$CASSANDRA_IMG"; then undefined_datastore_key "cassandra" "$INSTANA_VERSION" "CASSANDRA_IMG"; fi

CASSANDRA_OPERATOR_VERSION=$(select_datastore "cassandra" "$INSTANA_VERSION" "CASSANDRA_OPERATOR_VERSION")
if test -z "$CASSANDRA_OPERATOR_VERSION"; then undefined_datastore_key "cassandra" "$INSTANA_VERSION" "CASSANDRA_OPERATOR_VERSION"; fi

CASSANDRA_OPERATOR_IMG=$(select_datastore "cassandra" "$INSTANA_VERSION" "CASSANDRA_OPERATOR_IMG")
if test -z "$CASSANDRA_OPERATOR_IMG"; then undefined_datastore_key "cassandra" "$INSTANA_VERSION" "CASSANDRA_OPERATOR_IMG"; fi

CASSANDRA_SYSTEM_LOGGER_IMG=$(select_datastore "cassandra" "$INSTANA_VERSION" "CASSANDRA_SYSTEM_LOGGER_IMG")
if test -z "$CASSANDRA_SYSTEM_LOGGER_IMG"; then undefined_datastore_key "cassandra" "$INSTANA_VERSION" "CASSANDRA_SYSTEM_LOGGER_IMG"; fi

CASSANDRA_K8S_CLIENT_IMG=$(select_datastore "cassandra" "$INSTANA_VERSION" "CASSANDRA_K8S_CLIENT_IMG")
if test -z "$CASSANDRA_K8S_CLIENT_IMG"; then undefined_datastore_key "cassandra" "$INSTANA_VERSION" "CASSANDRA_K8S_CLIENT_IMG"; fi

CASSANDRA_IMG=$(select_datastore "cassandra" "$INSTANA_VERSION" "CASSANDRA_IMG")
if test -z "$CASSANDRA_IMG"; then undefined_datastore_key "cassandra" "$INSTANA_VERSION" "CASSANDRA_IMG"; fi

__datastore_image_list_cassandra=("${CASSANDRA_OPERATOR_IMG}" "${CASSANDRA_SYSTEM_LOGGER_IMG}" "${CASSANDRA_K8S_CLIENT_IMG}" "${CASSANDRA_IMG}")

#
# clickhouse
#
CLICKHOUSE_OPERATOR_CHART_VERSION=$(select_datastore "clickhouse" "$INSTANA_VERSION" "CLICKHOUSE_OPERATOR_CHART_VERSION")
if test -z "$CLICKHOUSE_OPERATOR_CHART_VERSION"; then undefined_datastore_key "clickhouse" "$INSTANA_VERSION" "CLICKHOUSE_OPERATOR_CHART_VERSION"; fi

CLICKHOUSE_OPERATOR_VERSION=$(select_datastore "clickhouse" "$INSTANA_VERSION" "CLICKHOUSE_OPERATOR_VERSION")
if test -z "$CLICKHOUSE_OPERATOR_VERSION"; then undefined_datastore_key "clickhouse" "$INSTANA_VERSION" "CLICKHOUSE_OPERATOR_VERSION"; fi

CLICKHOUSE_OPERATOR_IMG=$(select_datastore "clickhouse" "$INSTANA_VERSION" "CLICKHOUSE_OPERATOR_IMG")
if test -z "$CLICKHOUSE_OPERATOR_IMG"; then undefined_datastore_key "clickhouse" "$INSTANA_VERSION" "CLICKHOUSE_OPERATOR_IMG"; fi

CLICKHOUSE_OPENSSL_IMG=$(select_datastore "clickhouse" "$INSTANA_VERSION" "CLICKHOUSE_OPENSSL_IMG")
if test -z "$CLICKHOUSE_OPENSSL_IMG"; then undefined_datastore_key "clickhouse" "$INSTANA_VERSION" "CLICKHOUSE_OPENSSL_IMG"; fi

__datastore_image_list_clickhouse=("${CLICKHOUSE_OPERATOR_IMG}" "${CLICKHOUSE_OPENSSL_IMG}")

#
# clickhouse-keeper
#

#
# elasticsearch
#
ELASTICSEARCH_OPERATOR_CHART_VERSION=$(select_datastore "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_OPERATOR_CHART_VERSION")
if test -z "$ELASTICSEARCH_OPERATOR_CHART_VERSION"; then undefined_datastore_key "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_OPERATOR_CHART_VERSION"; fi

ELASTICSEARCH_OPERATOR_VERSION=$(select_datastore "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_OPERATOR_VERSION")
if test -z "$ELASTICSEARCH_OPERATOR_VERSION"; then undefined_datastore_key "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_OPERATOR_VERSION"; fi

ELASTICSEARCH_OPERATOR_IMG=$(select_datastore "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_OPERATOR_IMG")
if test -z "$ELASTICSEARCH_OPERATOR_IMG"; then undefined_datastore_key "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_OPERATOR_IMG"; fi

ELASTICSEARCH_VERSION=$(select_datastore "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_VERSION")
if test -z "$ELASTICSEARCH_VERSION"; then undefined_datastore_key "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_VERSION"; fi

ELASTICSEARCH_IMG=$(select_datastore "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_IMG")
if test -z "$ELASTICSEARCH_IMG"; then undefined_datastore_key "elasticsearch" "$INSTANA_VERSION" "ELASTICSEARCH_IMG"; fi

__datastore_image_list_elasticsearch=("${ELASTICSEARCH_OPERATOR_IMG}" "${ELASTICSEARCH_IMG}")

#
# kafka
#
KAFKA_OPERATOR_CHART_VERSION=$(select_datastore "kafka" "$INSTANA_VERSION" "KAFKA_OPERATOR_CHART_VERSION")
if test -z "$KAFKA_OPERATOR_CHART_VERSION"; then undefined_datastore_key "kafka" "$INSTANA_VERSION" "KAFKA_OPERATOR_CHART_VERSION"; fi

KAFKA_OPERATOR_VERSION=$(select_datastore "kafka" "$INSTANA_VERSION" "KAFKA_OPERATOR_VERSION")
if test -z "$KAFKA_OPERATOR_VERSION"; then undefined_datastore_key "kafka" "$INSTANA_VERSION" "KAFKA_OPERATOR_VERSION"; fi

KAFKA_OPERATOR_IMG=$(select_datastore "kafka" "$INSTANA_VERSION" "KAFKA_OPERATOR_IMG")
if test -z "$KAFKA_OPERATOR_IMG"; then undefined_datastore_key "kafka" "$INSTANA_VERSION" "KAFKA_OPERATOR_IMG"; fi

KAFKA_IMG=$(select_datastore "kafka" "$INSTANA_VERSION" "KAFKA_IMG")
if test -z "$KAFKA_IMG"; then undefined_datastore_key "kafka" "$INSTANA_VERSION" "KAFKA_IMG"; fi

__datastore_image_list_kafka=("${KAFKA_OPERATOR_IMG}" "${KAFKA_IMG}")

#
# postgres
#
POSTGRES_OPERATOR_CHART_VERSION=$(select_datastore "postgres" "$INSTANA_VERSION" "POSTGRES_OPERATOR_CHART_VERSION")
if test -z "$POSTGRES_OPERATOR_CHART_VERSION"; then undefined_datastore_key "postgres" "$INSTANA_VERSION" "POSTGRES_OPERATOR_CHART_VERSION"; fi

POSTGRES_OPERATOR_VERSION=$(select_datastore "postgres" "$INSTANA_VERSION" "POSTGRES_OPERATOR_VERSION")
if test -z "$POSTGRES_OPERATOR_VERSION"; then undefined_datastore_key "postgres" "$INSTANA_VERSION" "POSTGRES_OPERATOR_VERSION"; fi

POSTGRES_OPERATOR_IMG=$(select_datastore "postgres" "$INSTANA_VERSION" "POSTGRES_OPERATOR_IMG")
if test -z "$POSTGRES_OPERATOR_IMG"; then undefined_datastore_key "postgres" "$INSTANA_VERSION" "POSTGRES_OPERATOR_IMG"; fi

POSTGRES_IMG=$(select_datastore "postgres" "$INSTANA_VERSION" "POSTGRES_IMG")
if test -z "$POSTGRES_IMG"; then undefined_datastore_key "postgres" "$INSTANA_VERSION" "POSTGRES_IMG"; fi

__datastore_image_list_postgresql=("${POSTGRES_OPERATOR_IMG}" "${POSTGRES_IMG}")

#
# zookeeper
#
ZOOKEEPER_OPERATOR_CHART_VERSION=$(select_datastore "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_OPERATOR_CHART_VERSION")
if test -z "$ZOOKEEPER_OPERATOR_CHART_VERSION"; then undefined_datastore_key "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_OPERATOR_CHART_VERSION"; fi

ZOOKEEPER_OPERATOR_VERSION=$(select_datastore "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_OPERATOR_VERSION")
if test -z "$ZOOKEEPER_OPERATOR_VERSION"; then undefined_datastore_key "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_OPERATOR_VERSION"; fi

ZOOKEEPER_OPERATOR_IMG=$(select_datastore "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_OPERATOR_IMG")
if test -z "$ZOOKEEPER_OPERATOR_IMG"; then undefined_datastore_key "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_OPERATOR_IMG"; fi

ZOOKEEPER_IMG=$(select_datastore "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_IMG")
if test -z "$ZOOKEEPER_IMG"; then undefined_datastore_key "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_IMG"; fi

ZOOKEEPER_KUBECTL_IMG=$(select_datastore "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_KUBECTL_IMG")
if test -z "$ZOOKEEPER_KUBECTL_IMG"; then undefined_datastore_key "zookeeper" "$INSTANA_VERSION" "ZOOKEEPER_KUBECTL_IMG"; fi

__datastore_image_list_zookeeper=("${ZOOKEEPER_OPERATOR_IMG}" "${ZOOKEEPER_IMG}" "${ZOOKEEPER_KUBECTL_IMG}")

#
# beeinstana
#
BEEINSTANA_IMG_PLATFORM=$(select_datastore "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_IMG_PLATFORM")
if test -z "$BEEINSTANA_IMG_PLATFORM"; then undefined_datastore_key "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_IMG_PLATFORM"; fi

BEEINSTANA_VERSION=$(select_datastore "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_VERSION")
if test -z "$BEEINSTANA_VERSION"; then undefined_datastore_key "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_VERSION"; fi

BEEINSTANA_OPERATOR_CHART_VERSION=$(select_datastore "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_OPERATOR_CHART_VERSION")
if test -z "$BEEINSTANA_OPERATOR_CHART_VERSION"; then undefined_datastore_key "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_OPERATOR_CHART_VERSION"; fi

BEEINSTANA_OPERATOR_VERSION=$(select_datastore "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_OPERATOR_VERSION")
if test -z "$BEEINSTANA_OPERATOR_VERSION"; then undefined_datastore_key "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_OPERATOR_VERSION"; fi

BEEINSTANA_OPERATOR_IMG=$(select_datastore "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_OPERATOR_IMG")
if test -z "$BEEINSTANA_OPERATOR_IMG"; then undefined_datastore_key "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_OPERATOR_IMG"; fi

BEEINSTANA_AGGREGATOR_IMG=$(select_datastore "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_AGGREGATOR_IMG")
if test -z "$BEEINSTANA_AGGREGATOR_IMG"; then undefined_datastore_key "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_AGGREGATOR_IMG"; fi

BEEINSTANA_MONCONFIG_IMG=$(select_datastore "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_MONCONFIG_IMG")
if test -z "$BEEINSTANA_MONCONFIG_IMG"; then undefined_datastore_key "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_MONCONFIG_IMG"; fi

BEEINSTANA_INGESTOR_IMG=$(select_datastore "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_INGESTOR_IMG")
if test -z "$BEEINSTANA_INGESTOR_IMG"; then undefined_datastore_key "beeinstana" "$INSTANA_VERSION" "BEEINSTANA_INGESTOR_IMG"; fi

__datastore_image_list_beeinstana=("${BEEINSTANA_OPERATOR_IMG}" "${BEEINSTANA_AGGREGATOR_IMG}" "${BEEINSTANA_MONCONFIG_IMG}" "${BEEINSTANA_INGESTOR_IMG}")
