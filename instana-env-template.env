DOWNLOAD_KEY=""
SALES_KEY=""

INSTANA_UNIT_NAME=unit0
INSTANA_TENANT_NAME=tenant0

INSTANA_BASE_DOMAIN=""
INSTANA_TENANT_DOMAIN="${INSTANA_UNIT_NAME}-${INSTANA_TENANT_NAME}.${INSTANA_BASE_DOMAIN}"
INSTANA_AGENT_ACCEPTOR="agent-acceptor.${INSTANA_BASE_DOMAIN}"
INSTANA_OTLP_GRPC_ACCEPTOR="otlp-grpc.${INSTANA_BASE_DOMAIN}"
INSTANA_OTLP_HTTP_ACCEPTOR="otlp-http.${INSTANA_BASE_DOMAIN}"

INSTANA_ADMIN_USER="admin@instana.local"
INSTANA_ADMIN_PASSWORD=""

# kubernetes cli
KUBECTL_OC="oc"
KUBECTL_KUBECTL="kubectl"

KUBECTL=$KUBECTL_OC

# kubernetes platform
PLATFORM_OPENSHIFT="openshift"
PLATFORM_K8S="k8s"

PLATFORM=$PLATFORM_OPENSHIFT

# podman cli
PODMAN=podman
PODMAN_TLS_VERIFY=true

# core resource profile
CORE_RESOURCE_PROFILE_SMALL="small"
CORE_RESOURCE_PROFILE_MEDIUM="medium"
CORE_RESOURCE_PROFILE_LARGE="large"

CORE_RESOURCE_PROFILE=$CORE_RESOURCE_PROFILE_SMALL

CORE_TOKEN_SECRET=mytokensecret

# instana registry
INSTANA_REGISTRY="artifact-public.instana.io"

# private registry
PRIVATE_REGISTRY=""
PRIVATE_REGISTRY_USER=""
PRIVATE_REGISTRY_PASSWORD=""

# cert manager registry
QUAY_REGISTRY="quay.io"

# clickhouse users
CLICKHOUSE_DEFAULT="default"
CLICKHOUSE_DEFAULT_PASS="clickhouse-default-pass"

CLICKHOUSE_USER="clickhouse-user"
CLICKHOUSE_USER_PASS="clickhouse-default-pass"

# beeinstana admin password
BEEINSTANA_ADMIN_PASS=adminpass

# by default 2000Gi
BEEINSTANA_LIVE_VOLUME_SIZE=500Gi

### File names for backend images
INSTANA_BACKEND_IMAGE_LIST_FILE="backend-image-list.list"
PULL_BACKEND_IMAGES_SCRIPT="backend-pull-images.sh"
TAG_BACKEND_IMAGES_SCRIPT="backend-tag-images.sh"
PUSH_BACKEND_IMAGES_SCRIPT="backend-push-images.sh"

### File names for datastore images
INSTANA_DATASTORE_IMAGE_LIST_FILE="datastore-image-list.list"
PULL_DATASTORE_IMAGES_SCRIPT="datastore-pull-images.sh"
TAG_DATASTORE_IMAGES_SCRIPT="datastore-tag-images.sh"
PUSH_DATASTORE_IMAGES_SCRIPT="datastore-push-images.sh"

### File names for cert manager images
CERT_MGR_IMAGE_LIST_FILE="cert-manager-image-list.list"
PULL_CERT_MGR_IMAGES_SCRIPT="cert-manager-pull-images.sh"
TAG_CERT_MGR_IMAGES_SCRIPT="cert-manager-tag-images.sh"
PUSH_CERT_MGR_IMAGES_SCRIPT="cert-manager-push-images.sh"

### File names for manifests
MANIFEST_FILENAME_ZOOKEEPER=zookeeper.yaml
MANIFEST_FILENAME_CLICKHOUSE=clickhouse.yaml
MANIFEST_FILENAME_CLICKHOUSE_SCC=clickhouse-scc.yaml    # OCP
MANIFEST_FILENAME_KAFKA=kafka.yaml
MANIFEST_FILENAME_ELASTICSEARCH=elasticsearch.yaml
MANIFEST_FILENAME_POSTGRES=postgres.yaml
MANIFEST_FILENAME_POSTGRES_SCC=postgres-scc.yaml        # OCP
MANIFEST_FILENAME_CASSANDRA=cassandra.yaml
MANIFEST_FILENAME_CASSANDRA_SCC=cassandra-scc.yaml      # OCP
MANIFEST_FILENAME_BEEINSTANA=beeinstana.yaml
MANIFEST_FILENAME_CORE=core.yaml
MANIFEST_FILENAME_UNIT=unit.yaml

### Storage classes
RWO_STORAGECLASS=
RWX_STORAGECLASS=

### Uncomment for platforms other than OCP
#ELASTICSEARCH_SECURITY_CONTEXT="
#          # Add the following securityContext snippet for Kubernetes offerings other than OCP.
#          securityContext:
#            fsGroup: 1000
#            runAsGroup: 1000
#            runAsUser: 1000
#"

### Uncomment for platforms other than OCP
#ZOOKEEPER_SECURITY_CONTEXT="
#    # Add the following securityContext snippet for Kubernetes offerings other than OCP.
#    securityContext:
#      runAsUser: 1000
#      fsGroup: 1000
#"

### Uncomment for platforms other than OCP
#KAFKA_SECURITY_CONTEXT="
#        # Add the following securityContext snippet for Kubernetes offerings other than OCP.
#        securityContext:
#          runAsUser: 1000
#          fsGroup: 1000
#"
